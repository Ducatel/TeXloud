\documentclass[a4paper,12pt]{article}

% paquets pour avoir les lettres accentués et la typographie française
\usepackage{a4wide}
\usepackage[utf8]{inputenc}
\usepackage[frenchb]{babel}

%\usepackage{glossaries}



\usepackage[colorlinks=true,linkcolor=black]{hyperref}
\usepackage[T1]{fontenc}%la police utilisee dans le document

%trois package pour taper du texte mathémathiques
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{amsfonts}
\usepackage{mathrsfs}

%pour insérer des styles de liste supplémentaire
%\usepackage{enumerate}

%pour l'insertion d'image
\usepackage{graphicx}
\usepackage{float}% pour l'utilisation de "centering" et de l'option [H] qui permet de placer plus efficacement les images

%package pour les lien url :
\usepackage{url}


%pour l'insertion de code source


\usepackage{fancyvrb}

\begin{document}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% PAGE DE GARDE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{titlepage}
\begin{flushleft}
\large{Universit\'e du Havre \\
Master Matis \\
Sp\'ecialisation SIRES\\
}
\end{flushleft}

\setlength{\parskip}{96pt}

\begin{center}
\huge\textbf{TeXloud\\Des documents \LaTeX ~dans le Cloud}

\setlength{\parskip}{18pt}
\large\textsc{Référent: Y. Pigné}

\setlength{\parskip}{70pt}

\Large\textbf{Rapport}

\setlength{\parskip}{50pt}

\large Adrien Bruyère\\David Ducatel\\Meva Rakotondratsima\\Sidina Biha\\Zakaria Bouchakor
\end{center}
\setlength{\parskip}{50pt}
\begin{flushleft}
\rule{.4mm}{26mm}\rule{105mm}{.4mm}
\today
\end{flushleft}
\end{titlepage}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% FIN DE LA PAGE DE GARDE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
\clearpage

\tableofcontents

\newpage

\section{Introduction}
\subsection{Rappel du sujet}
\paragraph*{}
Ce projet propose la création et la gestion collaborative de documents
Latex. Le but est de proposer à des plateformes dépourvues de distribution
Latex (tablettes, smartphones, desktops), de se connecter au Web et
d'accéder à ces service de gestion et de compilation de documents.
\paragraph*{}
Les utilisateurs seront authentifiés au service et bénéficieront d'un espace
de stockage privé. L'application facilitera le partage de documents et le
travail collaboratif entre utilisateurs du service.
\paragraph*{} 
Coté client, deux types d'applications seront développés :

\begin{itemize}
 \item Un service Web permettra l'accès au service à partir de n'importe
quelle machine (desktop, tablette de tout OS) pourvue d'un navigateur
Web et d'une connexion internet

 \item Une application Android, permettra une certaine autonomie avec le
stockage temporaire d'une copie de travail des documents, permettant
un mode d'édition non-connecté.
\end{itemize}

\subsection{L'équipe}
\paragraph*{}
L'équipe est composé de 5 personnes:
\begin{itemize}
 \item Adrien Bruyère est responsable du développement de l'application Android
 \item David Ducatel (chef de projet) est responsable du développement de la frontale et du service de compilation.
 \item Meva Rakotondratsima est responsable du développement du service de stockage de données.
 \item Sidina Biha, Zakaria Bouchakor sont responsables du développement de l'application WEB
\end{itemize}

\newpage
\section{Choix techniques}
\subsection{Architecture général}
\paragraph*{}
Le projet est divisé en 5 parties minimum:
\begin{itemize}
 \item Un serveur web
 \item Une application Android
 \item Un serveur de routage et d'ordonnancement
 \item Un à N serveur(s) de stockage de données
 \item Un à N serveur(s) de compilation
\end{itemize}

\begin{figure}[!ht]
\begin{center}
  \includegraphics[width=0.92\textwidth,angle=90]{./images/DiagrammeDeploiement.jpg}
\end{center}
  \caption{Diagramme de déploiement}
  \label{déploiement}
\end{figure}

\paragraph*{}
Ce type d'architecture à été choisie car elle permet une extension du nombre de serveurs de compilation et de données théoriquement infinie. Aussi, elle permet de limité au maximum les échange "lourd"\footnote{Transfert de nombreux fichiers et donc potentiellement lourd pour le réseau}. L'ensemble des communications (sauf envoie de binaire) sont au format JSON.

\paragraph*{}
Typiquement une compilation de documents passe par l'ensemble des serveurs:
\begin{enumerate}
 \item Serveur HTTP $\rightarrow$ serveur de routage et d'ordonnancement
 \item Serveur routage et d'ordonnancement $\rightarrow$ serveur de stockage de données
 \item Serveur de stockage de données $\rightarrow$ serveur de compilation
 \item Serveur de compilation $\rightarrow$ serveur de stockage de données
 \item Serveur de stockage de données $\rightarrow$ serveur HTTP
\end{enumerate}



\subsection{Serveur web}
\paragraph*{}
Le serveur web inclue plusieurs services:
\begin{itemize}
 \item La base de données de l'application. Le SGBD MySQL a été choisie pour supporté cette tâche.
 \item L'interface coté serveur a été développé en PHP5. Le serveur HTTP Apache2 est utilisé pour géré les connexions.
 \item L'interface cliente utilise les technologies HTML5, CSS3 et javascript (Via le frameworks JQuery).
 \item L'interface de communication entre l'application Android et le reste de l'architecture.
\end{itemize}

\paragraph*{}
Un modèle de conception MVC a été utilisé afin de rendre le code de l'application plus clair, plus facilement maintenable et évolutif. Les communications avec le serveur de routage et d'ordonnancement sont effectués grâce à des sockets TCP qui ont une durée de vie égale à une boucle entre tous les serveurs. Ceci permet de ne pas laisser en permanence de ports ouvert sur le serveur et ainsi limité les risques d'attaques sur ce service.

\paragraph*{}
L'application Web est divisé en trois parties:
\begin{enumerate}
 \item La partie développement, où l'utilisateur peut écrire sont code LaTex, consulter les logs d'erreurs/warning (s'il existe) après la compilation.
 \item La partie gestion des projets. L'utilisateur peut crée des projets, des dossier (sous dossiers) et des fichiers LaTex. il peut aussi renommer, supprimer un projet, un dossier ou un fichier.
 \item La barre supérieur, où l'utilisateur peut synchronisées les fichiers qui ont été modifier, les compilées, télécharger sous format de PDF. Éventuellement l'utilisateur peut modifier ces informations personnels ou changer son mot de passe.
\end{enumerate}

\clearpage

\begin{figure}[!ht]
\begin{center}
  \includegraphics[width=0.6\textwidth]{./images/MVC.png}
\end{center}
  \caption{Diagramme MVC}
  \label{MVC}
\end{figure}

\subsection{Application Android}
\paragraph*{}
L'application Android comporte deux activités (écrans) principales.
\begin{itemize}
 \item La première est l'écran d'authentification, qui permet à l'utilisateur de s'authentifier afin d'accéder à son espace personnel, ou de s'inscrire afin de rejoindre le service TeXloud.
 \item La deuxième activité est lancée lorsque l'utilisateur est identifié. C'est l'écran principal de l'application.
\end{itemize}
\paragraph*{}

L'écran principal est divisé en trois parties : le bandeau supérieur, qui permet à l'utilisateur quelques interactions indispensables, comme la création de projet, la synchronisation ou encore la compilation. Lorsque l'utilisateur a fait des modifications qui 
n'ont pas été enregistrées (synchronisées), un logo rouge apparait pour rappeler à l'utilisateur de sauvegarder ses données. Une fois que les documents sont synchronisés, le logo rouge devient vert, l'utilisateur peut alors quitter l'application en étant sûr que ses 
modifications ont été prises en compte.
\paragraph*{}
La partie de gauche contient deux éléments : une liste déroulante (Spinner), qui permet à l'utilisateur de naviguer entre ses différents projets, et une arborescence qui permet à l'utilisateur de parcourir ses dossiers et fichiers. Un clic (appui) sur un dossier 
permet de masquer/afficher tous les fichiers et dossiers enfants (récursivement), et un clic sur un fichier le télécharge et l'affiche, permettant à l'utilisateur de le modifier. Les long clics sur les éléments de l'arborescence ouvrent un menu contextuel permettant, 
par exemple, d'ajouter un fichier, renommer, supprimer etc...
\paragraph*{}
La partie de droite est la saisie de texte. Le contenu de cette zone de texte est le contenu du fichier ouvert, affiché en italique dans l'arborescence de droite.Pour des raisons de simplicité, les ordres de synchronisation et de compilation sont bloquants, c'est-à-dire que l'utilisateur ne peut effectuer aucune modification tant que ces actions ne sont pas terminées.Toutes les requêtes utilisent le protocole HTTP et envoie les données via POST.


\subsection{Serveur de routage et d'ordonnancement}
\paragraph*{}
Le serveur de routage et d'ordonnancement permet de géré les communications entre le serveur web et les différents serveur de données et de compilation. Ce service à été développé en python. Il fourni deux services:
\begin{enumerate}
 \item Un service de routage
 \item Un service d'ordonnancement
\end{enumerate}

\paragraph*{}
Le service de routage permet de dirigé les requêtes vers les bon serveurs en fonctions de l'action voulu (compilation vers un serveurs de compilation,gestion des données vers le bon serveur de données). Le service d'ordonnancement permet de répartir la charge sur les différents serveurs en fonction de leurs charge propre. L'ordonnancement permet ainsi d'éviter d'avoir des serveurs totalement au repos et d'autres au maximum de leurs capacité.

\paragraph*{}
Ce service permet de gérer plusieurs connexion simultané. Il a été mit en charge avec plus de 1000 connexions simultané et aucun problème n'as été constaté.

\paragraph*{}
Les communications entre le serveur HTTP, les serveurs de compilation et les serveurs de données sont effectués la aussi grâce à des socket TCP.

\paragraph*{}
L'ensemble des données sur les serveurs (adresse IP, port du service, type de service, charge maximal) sont stocké au sein d'un fichier XML sur ce serveur.

\paragraph*{}
Il faut aussi indiquer que ce serveur génère des logs afin que le suivit de l'exploitation de cette partie puisse être effectué le plus simplement possible. Les logs générer sont en rotation, c'est-à-dire qu'ils ont une taille maximal fixer et qu'ils s'écrivent sur plusieurs fichiers\footnote{Sur trois fichiers actuellement}.


\subsection{Serveur de stockage de données}
\paragraph*{}
Lorsqu'un projet est crée sur TeXloud, un serveur de stockage lui est attribué lors de la création du projet par l'ordonnanceur.
Il s'agit en fait d'un parc de serveurs physiques disposant d'un démon serveur destiné à recevoir de la frontale des requêtes standardisées permettant de faire les traitements demandés.

L'application serveur est développée en python et dispose d'une socket en écoute sur un port spécifique.
La séparation des composant de l'application permet de donner un certaine scalabilité de l'application, les méthodes d'accès aux données peuvent donc différer selon le serveur concerné.
De plus, le stockage des fichier se fait à l'aide de gestionnaires de versions afin de permettre le travail en équipe et une gestion de version éventuelle.

\paragraph{}
Le service d'accès aux données se compose principalement de eux parties:

\begin{itemize}
\item Un démon serveur recevant les requêtes
\item Un connecteur permettant de faire les actions (notamment le stockage)
\end{itemize}

\paragraph{}
Chacune de ces parties sont implémentées par héritage, les deux classes \emph{DataSocket} et \emph{GenericConnector} définissent les méthodes nécessaires pour le fonctionnement complet du système et font éventuellement les traitements non spécifiques au type de stockage.
L'application est donc potentiellement capable d'ajouter des connecteurs spécifique pour un type de stockage différent en développant les fonctions nécessitant un traitement adapté à celui-ci.

Les fonctions du connecteur subversion sont intégrés par l'utilisation de la librairie Python PySvn permettant de faire les opération proposé par le système de gestion de version telle que les \emph{commit}, les \emph{merge} et les \emph{updates}.

\paragraph{}
Le concept de \emph{copies de travail} est au centre du système de gestion des données.
Les systèmes de gestions de versions permettent de récupérer une version d'un projet depuis un serveur distant en créant un \emph{miroir} du projet dans un état spécifique (généralement le dernier).

Le répertoire ainsi crée correspond à une copie de travail, lorsque des modification sont faites sur le projet, elles sont ajoutées puis mise à jour sur le serveur, créant ainsi une nouvelle version du projet.

\paragraph{}
\`A chaque connexion d'un utilisateur, une requête est envoyé par le serveur web jusqu'au serveur de donnée visé qui initialise une nouvelle copie de travail sur le serveur, il s'agit du répertoire de travail associé à l'utilisateur.
Les modifications effectuées au cours de la session de l'utilisateur sont synchronisées sur ce répertoire par écrasement des fichiers puis sont transmises aux gestionnaire de version.

\subsection{Serveur de compilation}
\paragraph*{}
Le serveur de compilation, comme son nom l'indique permet de compiler le projet LaTeX afin de générer un fichier PDF. Le processus du service de compilation se déroule en 5 étapes:
\begin{enumerate}
 \item Réception d'une archive qui contient tous les fichiers latex du projet
 \item Décompression de l'archive
 \item Compilation du projet\footnote{La gestion du nombre de compilation (édition des liens, bibtex,etc.) nécessaire est effectués par le script Perl latexmk}
 \item Génération d'un fichier de log au format XML
 \item Renvoi au serveur de données du log et du fichier PDF
\end{enumerate}

\paragraph*{}
Ce service est la aussi développé en Python et les communications sont basé sur des socket TCP. De même que pour le service de routage et d'ordonnancement, le service de compilation peut gérer plusieurs connexion en simultané.

\paragraph*{}
Ici aussi des logs en rotation sont générer afin de facilité l'exploitation de ce service de compilation.


\newpage
\section{Utilisation des applications}
\subsection{Application Web}
\subsubsection{Création de compte}
\paragraph*{}
Pour commencer à utiliser le projet TeXloud un utilisateur doit forcement passer par l'inscription sur le service. Pour ce faire il doit ce rendre sur la page d'accueil du site et cliquer sur le lien "s'inscrire".

\begin{figure}[!ht]
\begin{center}
  \includegraphics[width=1\textwidth]{./images/screenshot/Acceuil.png}
\end{center}
  \caption{Acceuil, application web}
  \label{acceuilWeb}
\end{figure}

\clearpage
\paragraph*{}
L'utilisateur est alors rediriger vers la page d'inscription qui lui demande quel information:
\begin{itemize}
 \item Un identifiant (Login)
 \item Un mot de passe 
 \item Une adresse email
\end{itemize}
\paragraph*{}
Une fois ces informations renseigné, l'utilisateur peux validé sont inscription grâce au bouton prévue à cette effet. Si il y a une erreur sur c'est informations, l'utilisateur est rediriger sur la page d'inscription avec une indication sur la provenance de l'erreur.

\begin{figure}[!ht]
\begin{center}
  \includegraphics[width=1\textwidth]{./images/screenshot/Inscription.png}
\end{center}
  \caption{Inscription, application web}
  \label{inscriptionWeb}
\end{figure}

\paragraph*{}
Une fois son inscription terminé, l'utilisateur est redirigé vers la page d'accueil ou il doit ce connecter à l'interface. La connexion redirige l'utilisateur vers l'interface principal l'application. A ce moment l'utilisateur ne dispose d'aucun projet. Nous allons voir par la suite comment faire pour créer un projet et des fichiers LaTex.

\begin{figure}[!ht]
\begin{center}
  \includegraphics[width=1\textwidth]{./images/screenshot/PageEdition1.png}
\end{center}
  \caption{Première page, application web}
  \label{firstPageWeb}
\end{figure}

\clearpage
\subsubsection{Création de projet}
\paragraph*{}
La création d'un projet s'effectue via la partie de gauche de l'application, l'arbre. Pour créer un nouveau projet, il suffit de faire un clique droit sur la racine de l'arbre "workspace" et de choisir dans la popup "créer un projet".

\begin{figure}[!ht]
\begin{center}
  \includegraphics[width=1\textwidth]{./images/screenshot/CreeProjet.png}
\end{center}
  \caption{Création projet, application web}
  \label{createProjectWeb}
\end{figure}

\paragraph*{}
Une fois que l'utilisateur a cliqué sur "créer un projet", la popup change afin que l'utilisateur puisse entrer le nom qu'il souhaite pour son projet. Une fois ceci terminé, il suffit de valider.

\begin{figure}[!ht]
\begin{center}
  \includegraphics[width=1\textwidth]{./images/screenshot/Suite_Creation_Projet.png}
\end{center}
  \caption{Création projet (nom du projet), application web}
  \label{suiteCreationProjet}
\end{figure}

\clearpage
\paragraph*{}
Une fois que l'utilisateur a créé son projet, il peut le voir afficher dans l'arbre sous la racine "workspace". A partir de ce point l'utilisateur peut créer des fichiers latex et des sous dossier si il le souhaite.

\begin{figure}[!ht]
\begin{center}
  \includegraphics[width=1\textwidth]{./images/screenshot/Suite2_Creation_Projet.png}
\end{center}
  \caption{Création projet terminé, application web}
  \label{suite2CreationProjet}
\end{figure}


\subsubsection{Création de fichier}
\paragraph*{}
Nous avons vue dans la partie précédente comment créer un projet, donc nous allons voir maintenant comment faire pour créer un fichier latex. Pour ce faire, il suffit de faire un clique droit sur le projet et un popup apparaît. Dans celle-ci il suffit de choisir "créer un fichier". 
\begin{figure}[!ht]
\begin{center}
  \includegraphics[width=1\textwidth]{./images/screenshot/MenuTextuel.png}
\end{center}
  \caption{Création de fichier, application web}
  \label{creationFichier}
\end{figure}

\clearpage

\paragraph*{}
Une fois ceci fait, l'utilisateur doit entrer le nom de son fichier \emph{avec son extension .tex} puis valider. Enfin l'utilisateur vois apparaître sous son projet son nouveau fichier.tex.
\begin{figure}[!ht]
\begin{center}
  \includegraphics[width=1\textwidth]{./images/screenshot/Suite_Creation_Fichier.png}
\end{center}
  \caption{Création de fichier terminé, application web}
  \label{creationFichierFin}
\end{figure}

\subsubsection{Compilation}
\paragraph*{}
A la création d'un nouveau fichier, le document courant reste en cours d'édition (à la connexion l'interface d'édition est désactivée), l'utilisateur clique donc sur le nouveau fichier qui sera rapatrié depuis le serveur de donnée et chargé dans l'interface.
L'utilisateur peut compiler son projet en cliquant sur le lien \emph{compiler} et accède au menu contextuel de compilation proposant une liste des différents projets disponibles.

\paragraph*{}
La sélection d'un projet dans la liste charge automatiquement la liste des différents fichiers disponibles dans laquelle l'utilisateur choisit le fichier principal, incluant éventuellement d'autres fichiers du projet.

\begin{figure}[!ht]
\begin{center}
  \includegraphics[width=1\textwidth]{./images/screenshot/Compiler.png}
\end{center}
  \caption{Compilation, application web}
  \label{compilation}
\end{figure}

\paragraph*{}
Enfin la soumission du formulaire lance la requête de compilation à proprement parlé au travers du réseau et rapatrie le fichier de log d'erreur et le fichier pdf si la compilation est un succès.

\paragraph*{}
La terminaison de la requête retourne à l'interface web les informations sur la compilation (log) et affiche le pdf dans l'interface web.
Au niveau de l'interface web, l'accès au pdf se fait systématiquement par la même url \emph{/ajax/getPdf}.
En fait au niveau du serveur web le fichier pdf est écrit dans \emph{/tmp/texloud} et l'adresse du pdf est stocké en session, l'action \emph{getPdf} force le téléchargement du fichier.

\paragraph{}

En réalité, nous n'utilisons pas directement l'action de téléchargement du pdf, en revanche, la librairie de visualisation de pdf \emph{pdfjs

\begin{itemize}
 \item Lancement compilation
 \item log
 \item visu du pdf
 \item telechargement du pdf
\end{itemize}


\subsubsection{Fonctions annexes}
\paragraph*{}
\begin{itemize}
 \item Suppression de dossier/fichier
 \item Rename dossier/fichier
 \item Info supp sur user
\end{itemize}

\subsection{Application Android}

\subsubsection{Page d'accueil}

\subsubsection{Création de compte}
\paragraph*{}

\subsubsection{Création de projet}
\paragraph*{}

\subsubsection{Synchronisation}
\paragraph*{}

\subsubsection{Compilation}
\paragraph*{}
\begin{itemize}
 \item Lancement compilation
 \item log
 \item visu du pdf
 \item telechargement du pdf
\end{itemize}


\subsubsection{Fonctions annexes}
\paragraph*{}
\begin{itemize}
 \item Suppression de dossier/fichier
 \item Rename dossier/fichier
 \item Info supp sur user
\end{itemize}

\newpage
\section{Perspective d'évolution}
\subsection{Support des images}
\paragraph*{}
Le supports des images dans l'application permettrai d'ajouter des images au sein des PDF généré. L'ajout de cette fonctionnalité est très simple et rapide à mettre en \oe uvre mais malheureusement, nous n'avons pas eu le temps de la mettre en place. Pour intégrer ce support, une légère modification de la frontale, du service web et de l'application Android sont nécessaire.

\subsection{Gestion des groupes}
\paragraph*{}
La gestion des groupes dans l'application permettrai la modification simultané de document par plusieurs utilisateurs. Cette modification est possible à intégrer par la suite car la base de données et le stockage des informations ont été prévue a cette effet\footnote{Le stockage des données étant effectués sur des serveur SubVersion et la gestion des conflit étant implémenté, la gestion des groupe ne posera aucun problème}. Comme pour le support des images, les modifications de l'application pour supporté cette fonctionnalité sont minime. Il s'agit seulement de modifier légèrement l'application Web et l'application Android.

\subsection{Coloration syntaxique sur Android}
\paragraph*{}
La coloration syntaxique sur tablette Android n'as pas été implémenté car nous n'avons pas trouvez de solution qui ne soit pas trop lourde en ressource pour une tablette. Ceci est sûrement possible si nous déclenchions la coloration syntaxique moins fréquemment, comme par exemple a chaque fin de ligne et juste sur la ligne en cour. Malheureusement nous n'avons pas eu le temps de mettre en place cette idée.


\subsection{Mot de passe oublié}
\paragraph*{}
La gestion des mots de passes oubliés n'est pas encore implémentée puisqu'elle dépend de la gestion des e-mails, et nous n'avons pas développé cette fonction. Cependant, le bouton et la boite de dialogue sont déjà implémentés sur l'interface Android. La gestion des e-mails n'as pas été possible car nous n'avions pas l'architecture physique nous permettant de faire fonctionné convenablement un serveur mail\footnote{Pour être dans de bonne condition, il aurai fallu que nous puissions avoir un accès vers internet afin de contacté les serveur SMTP ou POP de différents fournisseur d'adresse mail}.

\subsection{Utilisation d'autre support de stockage}
\paragraph*{}
Il serait possible d'utiliser plusieurs gestionnaire de version différents, des systèmes de fichiers,etc. pour stocker les données des utilisateurs. Pour l'instant seul SubVersion est géré, mais grâce a une interface générique, il est possible de développer rapidement des connecteurs pour n'importe quel gestionnaire de version. Grâce à cette interface, il suffit juste de développer une classe fille de cette interface sur un serveur de stockage de données et faire les appels spécifique au gestionnaire de version voulu.

\subsection{Sécurisation des transferts de données}
\paragraph*{}
Tous les échanges entre socket ne sont pas sécurisé. Plus précisément ils ne sont pas crypté et donc vulnérable au écoute sur le réseau\footnote{Attaque communément appelé sniffing}. Pour sécurisé ceci, il suffit d'utilisé un cryptage type SSL/TLS\footnote{Technique utilisé pour les transferts HTTPS}. Cette solution est très simple à mettre en place en python, il suffit de remplacer les objets socket par des objets SSLSocket\footnote{Il faut bien sur au préalable généré les certificats SSL}.

\newpage

\section{Conclusion}
\paragraph*{}

Le projet, bien qu'il ne soit pas totalement terminé, est stable, viable et utilisable. Ce projet nous a permit de nous familiariser avec de nouvelles technologies, notamment en PHP5 et en Python. Aussi cela nous a permit de nous impliquer dans des conceptions distribuées et ainsi nous formé sur une application réelle complexe et complète.

\paragraph*{}
Le projet a subit de fortes contraintes au niveau de l'architecture physique qui limitait grandement notre possibilité de travail. Ces contraintes nous ont forcer a travailler en local. Par conséquent nous avons du travailler sur les horaires d'ouverture de la faculté et lorsque la salle n'était pas occupé pour des cours. Aussi nous avons eu des problème quand a la formation de notre "cloud". En effet, nous avons du utilisé les PC de la salle A104 (Résultat 2 serveurs en moins par rapport a notre architecture de base). De plus ils nous a fallu trouvez un routeur WIFI afin de faire fonctionné la tablette avec notre "Cloud".

\paragraph*{}
Pour finir nous pouvons dire que ce projet complexe et complet a été très intéressant a mettre en place. Aussi, nous avons prit un soin particulier à produire un code propre, compréhensible, documenté et donc facilement réutilisable afin que de nombreuse fonctionnalité puissent être facilement intégrable. 


\newpage
\listoffigures


\end{document}
